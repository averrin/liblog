/*
 *   cpp-indicators - iAmir (Amir Ahmady) (C) 2020
 *       file name: indicators.hpp
 */

#ifndef __CPP_INDICATORS_
#define __CPP_INDICATORS_

#include <chrono>
#include <cmath>
#include <fmt/color.h>
#include <fmt/format.h>
#include <iostream>
#include <libprint.hpp>
#include <mutex>
#include <string>
#include <thread>
#include <vector>

namespace LibLog {

using namespace std::chrono;
using namespace LibPrint;

std::vector<std::vector<std::string>> IndicatorFrames = {
    {"üïõ", "üïö", "üïô", "üïò", "üïó", "üïñ", "üïï", "üïî", "üïì", "üïí", "üïë", "üïê"},
    {
        "‚¶ø     ",
        " ‚¶ø    ",
        "  ‚¶ø   ",
        "   ‚¶ø  ",
        "    ‚¶ø ",
        "     ‚¶ø",
        "    ‚¶ø ",
        "   ‚¶ø  ",
        "  ‚¶ø   ",
        " ‚¶ø    ",
        "‚¶ø     ",
    },
    {"‚Üê", "‚Üñ", "‚Üë", "‚Üó", "‚Üí", "‚Üò", "‚Üì", "‚Üô"},
    {"‚ñÅ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà", "‚ñá", "‚ñÜ", "‚ñÖ", "‚ñÑ", "‚ñÉ", "‚ñÅ"},
    {"‚ññ", "‚ñò", "‚ñù", "‚ñó"},
    {"‚î§", "‚îò", "‚î¥", "‚îî", "‚îú", "‚îå", "‚î¨", "‚îê"},
    {"‚ó¢", "‚ó£", "‚ó§", "‚ó•"},
    {"‚ó∞", "‚ó≥", "‚ó≤", "‚ó±"},
    {"‚ó¥", "‚ó∑", "‚ó∂", "‚óµ"},
    {"‚óê", "‚óì", "‚óë", "‚óí"},
    {"|", "/", "-", "\\"},
    {"‚ó°‚ó°", "‚äô‚äô", "‚ó†‚ó†"},
    {"‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"},
    {">))'>", " >))'>", "  >))'>", "   >))'>", "    >))'>", "   <'((<",
     "  <'((<", " <'((<"},
    {"‚†Å", "‚†Ç", "‚†Ñ", "‚°Ä", "‚¢Ä", "‚††", "‚†ê", "‚†à"},
    {"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"},
    {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
     "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"},
    {"‚ñâ", "‚ñä", "‚ñã", "‚ñå", "‚ñç", "‚ñé", "‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ"},
    {"‚ñ†", "‚ñ°", "‚ñ™", "‚ñ´"},
    {"‚Üê", "‚Üë", "‚Üí", "‚Üì"},
    {"‚ï´", "‚ï™"},
    {"‚áê", "‚áñ", "‚áë", "‚áó", "‚áí", "‚áò", "‚áì", "‚áô"},
    {"‚†Å", "‚†Å", "‚†â", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†§", "‚†Ñ", "‚†Ñ", "‚†§",
     "‚††", "‚††", "‚†§", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã", "‚†â", "‚†à", "‚†à"},
    {"‚†à", "‚†â", "‚†ã", "‚†ì", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ñ", "‚†¶", "‚†§", "‚††",
     "‚††", "‚†§", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã", "‚†â", "‚†à"},
    {"‚†Å", "‚†â", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†§", "‚†Ñ",
     "‚†Ñ", "‚†§", "‚†¥", "‚†≤", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†ö", "‚†ô", "‚†â", "‚†Å"},
    {"‚†ã", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í",
     "‚†ì", "‚†ã"},
    {"ÔΩ¶", "ÔΩß", "ÔΩ®", "ÔΩ©", "ÔΩ™", "ÔΩ´", "ÔΩ¨", "ÔΩ≠", "ÔΩÆ", "ÔΩØ", "ÔΩ±", "ÔΩ≤", "ÔΩ≥", "ÔΩ¥",
     "ÔΩµ", "ÔΩ∂", "ÔΩ∑", "ÔΩ∏", "ÔΩπ", "ÔΩ∫", "ÔΩª", "ÔΩº", "ÔΩΩ", "ÔΩæ", "ÔΩø", "ÔæÄ", "ÔæÅ", "ÔæÇ",
     "ÔæÉ", "ÔæÑ", "ÔæÖ", "ÔæÜ", "Ôæá", "Ôæà", "Ôæâ", "Ôæä", "Ôæã", "Ôæå", "Ôæç", "Ôæé", "Ôæè", "Ôæê",
     "Ôæë", "Ôæí", "Ôæì", "Ôæî", "Ôæï", "Ôæñ", "Ôæó", "Ôæò", "Ôæô", "Ôæö", "Ôæõ", "Ôæú", "Ôæù"},
    {".", "..", "..."},
    {"‚ñÅ", "‚ñÇ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà", "‚ñâ", "‚ñä", "‚ñã", "‚ñå", "‚ñç", "‚ñé", "‚ñè",
     "‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ", "‚ñà", "‚ñá", "‚ñÜ", "‚ñÖ", "‚ñÑ", "‚ñÉ", "‚ñÇ", "‚ñÅ"},
    {".", "o", "O", "¬∞", "O", "o", "."},
    {"|", "/", "-", "\\"},
    {"+", "x"},
    {"v", "<", "^", ">"},
    {"|       ", "||      ", "|||     ", "||||    ", "|||||   ", "||||||| ",
     "||||||||", "||||||| ", "||||||  ", "|||||   ", "||||    ", "|||     ",
     "||      ", "|       "},
    {"          ", "=         ",
     "==        ", "===       ", "====      ", "=====     ", "======    ",
     "=======   ", "========  ", "========= ", "=========="},
    {"(*---------)", "(-*--------)", "(--*-------)", "(---*------)",
     "(----*-----)", "(-----*----)", "(------*---)", "(-------*--)",
     "(--------*-)", "(---------*)"},
    // {"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"},
    {"‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±", "‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±", "‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±", "‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±", "‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±", "‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±",
     "‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±", "‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞"},
    {
        "‚óª‚óª‚óª‚óª‚óª‚óª‚óª‚óª",
        "‚óº‚óª‚óª‚óª‚óª‚óª‚óª‚óª",
        "‚óº‚óº‚óª‚óª‚óª‚óª‚óª‚óª",
        "‚óº‚óº‚óº‚óª‚óª‚óª‚óª‚óª",
        "‚óº‚óº‚óº‚óº‚óª‚óª‚óª‚óª",
        "‚óº‚óº‚óº‚óº‚óº‚óª‚óª‚óª",
        "‚óº‚óº‚óº‚óº‚óº‚óº‚óª‚óª",
        "‚óº‚óº‚óº‚óº‚óº‚óº‚óº‚óª",
        "‚óº‚óº‚óº‚óº‚óº‚óº‚óº‚óº",
    },
    {"‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", "‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", "‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", "‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí", "‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí",
     "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí", "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí", "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí", "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí", "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"},
    {"üåç", "üåé", "üåè"},
    {"‚óú", "‚óù", "‚óû", "‚óü"},
    {"‚¨í", "‚¨î", "‚¨ì", "‚¨ï"},
    {"‚¨ñ", "‚¨ò", "‚¨ó", "‚¨ô"},
    {"‚ô†", "‚ô£", "‚ô•", "‚ô¶"},
    {"‚ûû", "‚ûü", "‚û†", "‚û°", "‚û†", "‚ûü"},
    {"  |  ", " \\   ", "_    ", " \\   ", "  |  ", "   / ", "    _", "   / "},
    {"  . . . .", ".   . . .", ". .   . .", ". . .   .", ". . . .  ",
     ". . . . ."},
    {" |     ", "  /    ", "   _   ", "    \\  ", "     | ", "    \\  ",
     "   _   ", "  /    "},
    {"‚é∫", "‚éª", "‚éº", "‚éΩ", "‚éº", "‚éª"},
    {"‚ñπ‚ñπ‚ñπ‚ñπ‚ñπ", "‚ñ∏‚ñπ‚ñπ‚ñπ‚ñπ", "‚ñπ‚ñ∏‚ñπ‚ñπ‚ñπ", "‚ñπ‚ñπ‚ñ∏‚ñπ‚ñπ", "‚ñπ‚ñπ‚ñπ‚ñ∏‚ñπ", "‚ñπ‚ñπ‚ñπ‚ñπ‚ñ∏"},
    {"[    ]", "[   =]", "[  ==]", "[ ===]", "[====]", "[=== ]", "[==  ]",
     "[=   ]"},
    {"( ‚óè    )", "(  ‚óè   )", "(   ‚óè  )", "(    ‚óè )", "(     ‚óè)", "(    ‚óè )",
     "(   ‚óè  )", "(  ‚óè   )", "( ‚óè    )"},
    {"‚ú∂", "‚ú∏", "‚úπ", "‚ú∫", "‚úπ", "‚ú∑"},
    {"?", "¬ø"},
    {"‚¢π", "‚¢∫", "‚¢º", "‚£∏", "‚£á", "‚°ß", "‚°ó", "‚°è"},
    {"‚¢Ñ", "‚¢Ç", "‚¢Å", "‚°Å", "‚°à", "‚°ê", "‚°†"},
    {".  ", ".. ", "...", " ..", "  .", "   "},
    {".", "o", "O", "¬∞", "O", "o", "."},
    {"‚ñì", "‚ñí", "‚ñë"},
    {"‚ñå", "‚ñÄ", "‚ñê", "‚ñÑ"},
    {"‚ä∂", "‚ä∑"},
    {"‚ñ™", "‚ñ´"},
    {"‚ñ°", "‚ñ†"},
    {"‚ñÆ", "‚ñØ"},
    {"-", "=", "‚â°"},
    {"d", "q", "p", "b"},
    {"‚àô‚àô‚àô", "‚óè‚àô‚àô", "‚àô‚óè‚àô", "‚àô‚àô‚óè", "‚àô‚àô‚àô"},
    {"üåë ", "üåí ", "üåì ", "üåî ", "üåï ", "üåñ ", "üåó ", "üåò "},
    {"‚òó", "‚òñ"},
    {"‚ßá", "‚ßÜ"},
    {"‚óâ", "‚óé"},
    {"„äÇ", "„äÄ", "„äÅ"},
    {"‚¶æ", "‚¶ø"},
    {"·Äù", "·ÅÄ"},
    {"‚ñå", "‚ñÄ", "‚ñê‚ñÑ"}};

class Indicator {
public:
  Indicator(const duration<int, std::milli> &delay = 200ms, int type = 0,
            const std::string &endmsg = "", const std::string &prefix = "",
            const std::string &suffix = "",
            fmt::detail::color_type color = fmt::terminal_color::white,
            bool hide_on_end = false, bool is_progress = false,
            const std::vector<std::string> &custom_frames = {})
      : frame_delay(delay), type(type), endmsg(endmsg), prefix(prefix),
        suffix(suffix), hide_on_end(hide_on_end), custom_frames(custom_frames),
        is_active(false), color(color), is_progress(is_progress) {}

  fmt::detail::color_type color;
  bool is_progress = false;
  float progress = 0;
  ~Indicator() { stop(); }

  void start() {
    is_active = true;
    std::cout.flush();
    last_text_size = 0;
    if (type >= IndicatorFrames.size())
      type = 0;

    thread = std::thread([&]() {
      const std::vector<std::string> &frames =
          (custom_frames.size() > 0) ? custom_frames : IndicatorFrames[type];
      progress = 0;

      while (is_active) {
        display(frames);
      }
    });
  }

  void display(const std::vector<std::string> &frames) {

    int l = frames.size();
    unsigned int n = 0;
    if (is_progress) {
      n = round((l - 1) * progress);
    } else {
      n = (int)progress % l;
    }
    const std::string &frame = fmt::format(fmt::fg(color), frames[n]);
    if (!is_progress) {
      progress++;
    }
    std::cout << "\r" << prefix << frame << suffix;
    last_text_size = prefix.length() + frame.length() + suffix.length();
    std::cout.flush();
    std::this_thread::sleep_for(frame_delay);
  }

  void clear() { utils::clearLine(); }

  void stop() {
    if (is_active) {
      const std::vector<std::string> &frames =
          (custom_frames.size() > 0) ? custom_frames : IndicatorFrames[type];
      display(frames);
      is_active = false;
      thread.join();
      if (endmsg.size() > 0) {
        if (hide_on_end) {
          clear();
          std::cout << "\r" << endmsg;
        } else {
          std::cout << "\n" << endmsg;
        }
      } else {
        if (hide_on_end) {
          clear();
          std::cout << "\r";
        } else {
          std::cout << "\n";
        }
      }
      std::cout.flush();
    }
  }

  void set_frame_delay(const duration<int, std::milli> &delay) {
    frame_delay = delay;
  }

  void set_prefix(const std::string &string) { prefix = string; }

  void set_suffix(const std::string &string) { suffix = string; }

  void set_end_msg(const std::string &string) { endmsg = string; }

  bool is_active;

private:
  duration<int, std::milli> frame_delay;
  std::string prefix;
  std::string suffix;
  std::vector<std::string> custom_frames;
  unsigned char type;
  std::string endmsg;
  unsigned int last_text_size;
  bool hide_on_end;
  std::thread thread;
};
} // namespace LibLog

#endif
